// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Favorite Favorite[]
  Upvote Upvote[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlaceType {
  library
  cafe
  campus
  other
}

enum SeatingLevels {
  limited
  adequette
  plentiful
}

enum BusyLevels {
  quiet
  moderate
  packed
}


model Place {
  id            String      @id @default(cuid())
  name          String
  description   String?
  placeType     PlaceType
  lat           Float
  lng           Float
  hasOutlets    Boolean?
  hasWifi       Boolean?
  seatingLevel  SeatingLevels?
  busyLevel     BusyLevels?
  noiseLevel    Int?        
  images        String[]    @default([])

  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  favorites     Favorite[]
  upvotes       Upvote[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  placeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
}

model Upvote {
  id        String   @id @default(cuid())
  userId    String
  placeId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  @@unique([userId, placeId])
}